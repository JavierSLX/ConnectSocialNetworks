---------------- LECCIÓN 1 -------------------
>> Orientado a objetos
> Es un paradigma de programación.
> Está basado en herencia, extracción, polimorfismo y encapsulamiento.
> 3 características básicas de un objeto
1. Estado.  Valor de todos los atributos.
2. Comportamiento. Operaciones que afectan su estado.
3. Identidad. Se distingen por su nombre e identificación.
> El programa depende del nivel de abstracción que se quiera plantear para la creación de objetos.

>> Atributos y métodos
> Clase. Describe un grupo de objetos con características comunes, atributos y operaciones además de las relaciones con otros.
> Objeto. Es una instancia de una clase. 
> Atributo. Describen el estado de un objeto o de una clase. Un atributo consta de dos partes fundamentales.
1. Nombre del atributo.
2. Tipo de dato del atributo.
> Método. Acciones o tranformaciones que se le pueden agregar a un objeto o una clase.
> Visibilidad. Determina si un atributo o método es público, protegido o privado.
* Pública. Cualquier clase puede utilizarla.
* Protegida. Cualquier subclase puede utilizarla excepto la clase cliente.
* Privada. Sólo la clase donde se declara puede utilizarla.
> Ventajas de POO
* Reusabilidad. Consiste en reutilizar las distintas clases.
* Mantenibilidad. Son más sencillos de entender y comprender.
* Modificabilidad. Permite realizar modificaciones más sencilla.
* Modularidad. Es posible probarlas de manera independiente.
> Desventajas
* Aprendizaje.
* Uso de recursos.
* Tamaño de programa.

>> Creando métodos en Netbeans
> ALT + INSERT
> Los objetos que se usan en otras clases y que se van a guardar datos en los atributos de los mismos, deben declararse en el constructor o en el método antes de que sean usados.

---------------- LECCIÓN 2 -------------------
>>Abstracción, encapsulamiento y modularidad
> Abstracción. Es el proceso de centrarse en lo que es y lo que se hace y no en como se hace. Separar aspectos importantes para un objetivo específico y eliminar los menos revelantes.
> Encapsulamiento. Envolver los datos y operaciones que solo pueden ser cambiados por los métodos de esa clase. La clase es la unidad de modularización en orientado a objetos que encapsula a atributos y operaciones. Getter y Setter siempre se deben usar como metodos para realizar cambios externos de atributos privados de la clase.
> Modularidad. Es la propiedad que permite dividir una aplicación en partes más pequeñas llamados módulos que deben de ser lo más independientes posibles.

>> Lenguaje Unificado de Modelado (UML)
> Unified Modeling Language
> Respaldado por el Object Management Group (OMG)
> Es un lenguaje para especificar, para describir métodos o procesos. Es el lenguaje en el que está descrito el modelo. 
> Diagrama de clases. Es un tipo de diagrama de estructura estática. Muestra sus atributos, sus operaciones o métodos y sus relaciones con otros objetos.
---- RELACIONES ----
> Agregación. Contiene o es parte de una clase. En un diagrama se relaciona con una línea con un rombo sin relleno lo que significa que es parte de... por ejemplo una llanta es parte de un carro.
> Composición. Se trata de la asoción que especifica la relación. Compuesto por o tiene. Está no puede ser removida ni puede ser eliminada hasta que se remueve todo. Por ejemplo un objeto brazo de un objeto cuerpo. Se coloca un rombo relleno desde la clase que las contiene hasta las clases que la componen.
> Asociación. Esta relación usa o activa otro objeto. Se relaciona con una línea. Por ejemplo una mano usa un guante.

>> Relación de composición
> Para que la relación de composición se de, debe de estar una clase dentro de la clase que la contiene. En resumen, una clase está contenida en otra.

>> Relación de agregación

---------------- LECCIÓN 3 -------------------
>> Herencia
> La herencia es el mecanismo empleado para obtener los atributos y operaciones usando el método de generalización. Tomando como base una relación jerarquica. Clase padre, clase hija. 
> Herencia simple. Sólo pueden heredar de una sóla clase a la vez.

>> Polimorfismo
> Hace referencia a la capacidad de un método para tener muchas formas. Es el mecanismo que permitirá definir particularidades. Es parecido a la sobrecarga.

>> Notas sobre herencia y polimorfismo
> Para que una subclase (o clase hija) pueda heredar métodos de una superclase (clase padre) debe de al definirse acompañarse con la palabra reservada "extends" y luego el nombre de la superclase.
> La palabra reservada "super" permite a una subclase mandar llamar un método de su superclase, acompañanado con el operador punto (Ej. super.definirElemento()). Para mandar llamar el constructor de la superclase solo es necesario colocar la palabra super y colocar los párametros necesarios del constructor.
> El término "@Override" acompañado del un nombre de un método de la superclase permite realizar cambios o usarla como propia de una subclase.
> La palabra reservada "abtsract" se utiliza para crear una clase abstracta (que siempre será una superclase) ningún objeto puede instanciarse de ella. Se usa para que sus subclases que tienen métodos y atributos similares compartan y hereden de ella tales propiedades. Se usa para definir una clase abstracta de la siguiente manera: "public abstract class Ejemplo{};"
> Un método que contiene la palabra reservada "abstract" significa que cualquier subclase que derive de la superclase puede sobreescribir tal método (y debe obligatoriamente hacerlo).
> La palabra reservada "instanceof" se usa como condiciones para saber si una clase está referenciada de otra misma (regresa true o false) por ejemplo Empleado instanceof EmpleadoAsalarido regresa true.

---------------- LECCIÓN 4 -------------------
>> Método constructor
> Se usa para inicializar los valores del objeto. Lleva el mismo nombre de la clase. Intervienen tanto en la herencia como en el polimorfismo. Se usa la palabra super cuando se quiere llamar un constructor específico.

>> Getters y Setters
> El método Setter se acompaña de un método Getter. Existe un Getter por cada atributo, existe un Setter por cada atributo. Los Getter comienza con get... y los Setters comienza con set...

>> Destructor Recolector de basura
> Se implementa llamando el método "Finalize()". Libera recursos cuando el objeto ya no se usará más.
> Para declarar un destructor hay que declarar un método "protected void finalize throws Throwable" que es heradado de la clase Throwable, para usarse se manda llamar de donde se necesita con el método System.gc().

---------------- LECCIÓN 5 -------------------
>> Clases abstractas e interfaces
> Una clase abstracta es una clase que no se va a instanciar. Se define los comportamientos generalmente de los objetos. Los métodos abstractos deben de ser obligatoriamente desarrollados en las clases heredadas de estas.
> La palabra reservada "abstract" debe de ser colocada antes de la palabra Class para definir una clase abstracta y antes del tipo de retorno del método para definir un método abstracto.
> Interfaces. En las interfaces no se implementa ningún método. Todos los métodos son abstractos pero no se escribe la palabra abstract. Se puede hacer herencia múltiple usando interfaces. Se debe de usar la palabra reservada "implements" después de la declaración de la clase (Ej. public class Guitarra implements InstrumentoAfinable).

>> Clase Object
> La clase object se encuentra la parte más arriba de la herencia de todas las clases. Todas las clases son descendientes directos o indirectos de la clase object.
> Define los estados y los comportamientos que todas las clases deben tener. Como la posibilidad de compararse unos objetos con otros, de convertirse en cadenas, devolver la clase object.
> Algunos de lo métodos generales pueden sobreescribirse de ser necesarios.
> Algunos de los métodos generales son: 
*toString(). Este método regresa una cadena de texto que representa al método. 
*equals(). Se utiliza para comparar si dos objetos si son iguales.
*getClass(). Regresa una representación en tiempo de ejecución de la clase del objeto. Regresa su nombre, el nombre de su superclase, y el nombre de sus interfaces que implementa.
*clone(). Este método permite clonar un objeto.
> La palabra reservada @Override significa que el método siguiente es un método sobreescrito.
